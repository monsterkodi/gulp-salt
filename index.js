'use strict';
var _, asciiJoin, asciiLines, chars, log, path, salt, thru, util;

_ = require('lodash');

path = require('path');

thru = require('through2');

util = require('gulp-util');

log = util.log;

module.exports = function(options) {
  var opts;
  opts = _.assign({
    coffee: {
      marker: '#!!',
      prefix: '###',
      postfix: '###'
    },
    styl: {
      marker: '//!',
      prefix: '/*',
      fill: '*  ',
      postfix: '*/'
    }
  }, options);
  return thru.obj(function(file, enc, cb) {
    var ext, salted;
    if (!file.isNull() && !file.isStream()) {
      ext = path.extname(file.path).substr(1);
      if (opts[ext] == null) {
        ext = 'coffee';
      }
      salted = salt(file.contents.toString('utf8'), opts[ext]);
      file.contents = new Buffer(salted);
    }
    return cb(null, file);
  });
};


/*
 0000000   0000000   000      000000000
000       000   000  000         000   
0000000   000000000  000         000   
     000  000   000  000         000   
0000000   000   000  0000000     000
 */

asciiLines = function(s, options) {
  var c, cs, i, len, rs, zs;
  s = s.toLowerCase().trim();
  cs = [];
  for (i = 0, len = s.length; i < len; i++) {
    c = s[i];
    if (chars[c] != null) {
      cs.push(chars[c]);
    }
  }
  zs = _.zip.apply(null, cs);
  rs = _.map(zs, function(j) {
    return j.join('  ');
  });
  if ((options.character != null) && options.character.length === 1) {
    rs = _.map(rs, function(l) {
      return l.replace(/0/g, options.character);
    });
  }
  return rs;
};

asciiJoin = function(l) {
  return "\n" + l.join('\n') + "\n";
};

salt = function(s, options) {
  var i, k, l, len, li, lines, lns, m, r, ref, salted;
  lines = s.split('\n');
  salted = [];
  r = new RegExp('^(\\s*)(' + options.marker + ")", 'i');
  for (li = i = 0, ref = lines.length; 0 <= ref ? i < ref : i > ref; li = 0 <= ref ? ++i : --i) {
    if (m = lines[li].match(r)) {
      lns = asciiLines(lines[li].slice(m[1].length + options.marker.length), options);
      if (options.verbose) {
        log(asciiJoin(lns));
      }
      if (options.prefix != null) {
        salted.push(m[1] + options.prefix);
      }
      for (k = 0, len = lns.length; k < len; k++) {
        l = lns[k];
        salted.push(m[1] + ((options.fill != null) && options.fill || '') + l);
      }
      if (options.postfix != null) {
        salted.push(m[1] + options.postfix);
      }
    } else {
      salted.push(lines[li]);
    }
  }
  return salted.join('\n');
};


/*
00000000   0000000   000   000  000000000
000       000   000  0000  000     000   
000000    000   000  000 0 000     000   
000       000   000  000  0000     000   
000        0000000   000   000     000
 */

chars = {
  '0': [" 000000 ", "000  000", "00    00", "000  000", " 000000 "],
  '1': ["   000", " 00000", "000000", "   000", "   000"],
  '2': ["00000 ", "   000", "  000 ", " 000  ", "000000"],
  '3': ["000000 ", "    000", "  0000 ", "    000", "000000 "],
  '4': ["000  000", "000  000", "00000000", "     000", "     000"],
  '5': ["0000000 ", "000     ", "0000000 ", "     000", "0000000 "],
  '6': ["  000   ", " 000    ", "0000000 ", "000  000", " 000000 "],
  '7': ["0000000", "   000 ", "  000  ", " 000   ", "000    "],
  '8': [" 000000 ", "000  000", "  0000  ", "000  000", " 000000 "],
  '9': [" 000000 ", "000  000", " 000000 ", "   000  ", "  000   "],
  '!': ["000", "000", "000", "   ", "000"],
  '?': ["00000 ", "   000", " 000  ", "      ", " 000  "],
  '-': ["      ", "      ", "000000", "      ", "      "],
  '_': ["      ", "      ", "      ", "      ", "000000"],
  '/': ["    000", "   000 ", "  000  ", " 000   ", "000    "],
  '#': [" 00  00 ", "00000000", " 00  00 ", "00000000", " 00  00 "],
  '\\': ["000    ", " 000   ", "  000  ", "   000 ", "    000"],
  ':': ["000", "000", "   ", "000", "000"],
  '.': ["   ", "   ", "   ", "000", "000"],
  ' ': ["    ", "    ", "    ", "    ", "    "],
  'a': [" 0000000 ", "000   000", "000000000", "000   000", "000   000"],
  'b': ["0000000  ", "000   000", "0000000  ", "000   000", "0000000  "],
  'c': [" 0000000", "000     ", "000     ", "000     ", " 0000000"],
  'd': ["0000000  ", "000   000", "000   000", "000   000", "0000000  "],
  'e': ["00000000", "000     ", "0000000 ", "000     ", "00000000"],
  'f': ["00000000", "000     ", "000000  ", "000     ", "000     "],
  'g': [" 0000000 ", "000      ", "000  0000", "000   000", " 0000000 "],
  'h': ["000   000", "000   000", "000000000", "000   000", "000   000"],
  'i': ["000", "000", "000", "000", "000"],
  'j': ["      000", "      000", "      000", "000   000", " 0000000 "],
  'k': ["000   000", "000  000 ", "0000000  ", "000  000 ", "000   000"],
  'l': ["000    ", "000    ", "000    ", "000    ", "0000000"],
  'm': ["00     00", "000   000", "000000000", "000 0 000", "000   000"],
  'n': ["000   000", "0000  000", "000 0 000", "000  0000", "000   000"],
  'o': [" 0000000 ", "000   000", "000   000", "000   000", " 0000000 "],
  'p': ["00000000 ", "000   000", "00000000 ", "000      ", "000      "],
  'q': [" 0000000 ", "000   000", "000 00 00", "000 0000 ", " 00000 00"],
  'r': ["00000000 ", "000   000", "0000000  ", "000   000", "000   000"],
  's': [" 0000000", "000     ", "0000000 ", "     000", "0000000 "],
  't': ["000000000", "   000   ", "   000   ", "   000   ", "   000   "],
  'u': ["000   000", "000   000", "000   000", "000   000", " 0000000 "],
  'v': ["000   000", "000   000", " 000 000 ", "   000   ", "    0    "],
  'w': ["000   000", "000 0 000", "000000000", "000   000", "00     00"],
  'x': ["000   000", " 000 000 ", "  00000  ", " 000 000 ", "000   000"],
  'y': ["000   000", " 000 000 ", "  00000  ", "   000   ", "   000   "],
  'z': ["0000000", "   000 ", "  000  ", " 000   ", "0000000"]
};
