'use strict'

_    = require 'lodash'
path = require 'path'
thru = require 'through2'
util = require 'gulp-util'
log  = util.log

module.exports = (options) ->
    
    opts = _.assign
        coffee: 
            marker:  '#!!'
            prefix:  '###'
            postfix: '###'
        styl: 
            marker:  '//!'
            prefix:  '/*'
            fill:    '*  '
            postfix: '*/'
    ,
        options
    
    thru.obj (file, enc, cb) ->
        
        if not file.isNull() and not file.isStream()
            ext = path.extname(file.path).substr 1
            ext = 'coffee' if not opts[ext]?
            salted = salt file.contents.toString('utf8'), opts[ext]
            file.contents = new Buffer salted
            
        cb null, file

###
 0000000   0000000   000      000000000
000       000   000  000         000   
0000000   000000000  000         000   
     000  000   000  000         000   
0000000   000   000  0000000     000   
###

asciiLines = (s, options) ->
    
        s = s.toLowerCase().trim()
        
        cs = []
        for c in s
            if chars[c]?
                cs.push chars[c]
                
        zs = _.zip.apply(null, cs)
        rs = _.map(zs, (j) -> j.join('  '))
        if options.character? and options.character.length == 1
            rs = _.map(rs, (l) -> l.replace(/0/g, options.character))
        rs
    
asciiJoin = (l) -> "\n"+l.join('\n')+"\n"

salt = (s, options) ->

    lines = s.split '\n'
    salted = []
    r = new RegExp('^(\\s*)(' + options.marker + ")", 'i')
    for li in [0...lines.length]
        if m = lines[li].match(r)
            lns = asciiLines(lines[li].slice(m[1].length+options.marker.length), options)
            if options.verbose
                log asciiJoin(lns)
            salted.push m[1] + options.prefix if options.prefix?
            for l in lns
                salted.push m[1] + (options.fill? and options.fill or '') + l
            salted.push m[1] + options.postfix if options.postfix?
        else
            salted.push lines[li]
        
    salted.join('\n')
                        
###
00000000   0000000   000   000  000000000
000       000   000  0000  000     000   
000000    000   000  000 0 000     000   
000       000   000  000  0000     000   
000        0000000   000   000     000   
###

chars =
    '0': [
        " 000000 "
        "000  000"
        "00    00"
        "000  000"
        " 000000 "
    ]
    '1': [
        "   000"
        " 00000"
        "000000"
        "   000"
        "   000"
    ]
    '2': [
        "00000 "
        "   000"
        "  000 "
        " 000  "
        "000000"
    ]
    '3': [
        "000000 "
        "    000"
        "  0000 "
        "    000"
        "000000 "
    ]
    '4': [
        "000  000"
        "000  000"
        "00000000"
        "     000"
        "     000"
    ]
    '5': [
        "0000000 "
        "000     "
        "0000000 "
        "     000"
        "0000000 "
    ]
    '6': [
        "  000   "
        " 000    "
        "0000000 "
        "000  000"
        " 000000 "
    ]    
    '7': [
        "0000000"
        "   000 "
        "  000  "
        " 000   "
        "000    "
    ]    
    '8': [
        " 000000 "
        "000  000"
        "  0000  "
        "000  000"
        " 000000 "
    ]    
    '9': [
        " 000000 "
        "000  000"
        " 000000 "
        "   000  "
        "  000   "
    ]    
    '!': [
        "000"
        "000"
        "000"
        "   "
        "000"
    ]
    '?' : [
        "00000 "
        "   000"
        " 000  "
        "      "
        " 000  "
    ]
    '-': [
        "      "
        "      "
        "000000"
        "      "
        "      "
    ]
    '_': [
        "      "
        "      "
        "      "
        "      "
        "000000"
    ]
    '/': [
        "    000"
        "   000 "
        "  000  "
        " 000   "
        "000    "
    ]
    '#': [
        " 00  00 "
        "00000000"
        " 00  00 "
        "00000000"
        " 00  00 "
    ]
    '\\': [
        "000    "
        " 000   "
        "  000  "
        "   000 "
        "    000"
    ]
    ':': [
        "000"
        "000"
        "   "
        "000"
        "000"
    ]
    '.': [
        "   "
        "   "
        "   "
        "000"
        "000"
    ]
    ' ': [
        "    "
        "    "
        "    "
        "    "
        "    "
    ]
    'a': [
        " 0000000 "
        "000   000"
        "000000000"
        "000   000"
        "000   000"
    ]
    'b': [
        "0000000  "
        "000   000"
        "0000000  "
        "000   000"
        "0000000  "
    ]
    'c': [
        " 0000000"
        "000     "
        "000     "
        "000     "
        " 0000000"
    ]
    'd': [
        "0000000  "
        "000   000"
        "000   000"
        "000   000"
        "0000000  "
    ]
    'e': [
        "00000000"
        "000     "
        "0000000 "
        "000     "
        "00000000"
    ]
    'f': [
        "00000000"
        "000     "
        "000000  "
        "000     "
        "000     "
    ]
    'g': [
        " 0000000 "
        "000      "
        "000  0000"
        "000   000"
        " 0000000 "
    ]
    'h': [
        "000   000"
        "000   000"
        "000000000"
        "000   000"
        "000   000"
    ]
    'i': [
        "000"
        "000"
        "000"
        "000"
        "000"
    ]
    'j': [

        "      000"
        "      000"
        "      000"
        "000   000"
        " 0000000 "
    ]
    'k': [

        "000   000"
        "000  000 "
        "0000000  "
        "000  000 "
        "000   000"
    ]
    'l': [

        "000    "
        "000    "
        "000    "
        "000    "
        "0000000"
    ]
    'm': [

        "00     00"
        "000   000"
        "000000000"
        "000 0 000"
        "000   000"
    ]
    'n': [

        "000   000"
        "0000  000"
        "000 0 000"
        "000  0000"
        "000   000"
    ]
    'o': [

        " 0000000 "
        "000   000"
        "000   000"
        "000   000"
        " 0000000 "
    ]
    'p': [

        "00000000 "
        "000   000"
        "00000000 "
        "000      "
        "000      "
    ]
    'q': [

        " 0000000 "
        "000   000"
        "000 00 00"
        "000 0000 "
        " 00000 00"
    ]
    'r': [

        "00000000 "
        "000   000"
        "0000000  "
        "000   000"
        "000   000"
    ]
    's': [

        " 0000000"
        "000     "
        "0000000 "
        "     000"
        "0000000 "
    ]
    't': [

        "000000000"
        "   000   "
        "   000   "
        "   000   "
        "   000   "
    ]
    'u': [

        "000   000"
        "000   000"
        "000   000"
        "000   000"
        " 0000000 "
    ]
    'v': [

        "000   000"
        "000   000"
        " 000 000 "
        "   000   "
        "    0    "
    ]
    'w': [

        "000   000"
        "000 0 000"
        "000000000"
        "000   000"
        "00     00"
    ]
    'x': [

        "000   000"
        " 000 000 "
        "  00000  "
        " 000 000 "
        "000   000"
    ]
    'y': [

        "000   000"
        " 000 000 "
        "  00000  "
        "   000   "
        "   000   "
    ]
    'z': [

        "0000000"
        "   000 "
        "  000  "
        " 000   "
        "0000000"
]
